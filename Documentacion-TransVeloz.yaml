---
openapi: 3.0.0
info:
  title: Simple TransVeloz API
  description: API of TransVeloz system
  contact:
    name: Jorge Alejo-Kevin Escobar-Joel Quispe-Antonio Rocha
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/jantonio2/TransVeloz/1.0.0
  description: TransVeloz API documentation
tags:
- name: user
  description: Operations about user
- name: driver
  description: Operations about driver
- name: payment
  description: Transactions that user make on the system
- name: administration
  description: Operation about administration
- name: score
  description: Operations about vehicles scores
- name: travel
  description: Operations about travel
- name: vehicle
  description: Operations about vehicles
paths:
  /v1/administration:
    post:
      tags:
      - administration
      summary: Add a new administratos to the system
      operationId: addAdministration
      requestBody:
        $ref: '#/components/requestBodies/Administration'
      responses:
        "201":
          description: User added
        "405":
          description: Invalid input
  /v1/user:
    get:
      tags:
      - user
      summary: Get all users in the system
      operationId: getAllUsers
      parameters:
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverRequest'
        "400":
          description: Invalid status value
    put:
      tags:
      - user
      summary: Update an existing user
      operationId: updateUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: Successful update
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
    post:
      tags:
      - user
      summary: Add a new user to the system
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "201":
          description: User added
        "405":
          description: Invalid input
  /v1/user/{idUser}:
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
      - name: idUser
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/SingleUser'
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
  /v1/user/{idUser}/image:
    post:
      tags:
      - user
      summary: uploads an picture profile
      operationId: uploadFile
      parameters:
      - name: idUser
        in: path
        description: ID of user to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
  /v1/user/{idUser}/payment/{idPayment}:
    get:
      tags:
      - user
      summary: Get payment by ID user and ID payment
      operationId: getPaymentByUserId
      parameters:
      - name: idUser
        in: path
        description: ID user that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: idPayment
        in: path
        description: ID payment that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        "400":
          description: Invalid id payment
        "401":
          description: Please sign in
        "404":
          description: Data not found
  /user/{idUser}/payment:
    get:
      tags:
      - user
      summary: Get payments by userId
      operationId: getPaymentsByUserId
      parameters:
      - name: idUser
        in: path
        description: ID user that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentHistoryRequest'
        "400":
          description: Invalid id payment
        "401":
          description: Please sign in
        "404":
          description: Data not found
  /v1/driver:
    get:
      tags:
      - driver
      summary: Get all drivers in the system
      operationId: getAllDrivers
      parameters:
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverContactRequest'
        "400":
          description: Invalid status value
    put:
      tags:
      - driver
      summary: Update an existing driver
      operationId: updateDriver
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        "200":
          description: Successful update
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
        "405":
          description: Validation exception
    post:
      tags:
      - driver
      summary: Add a new driver to the system
      operationId: addDriver
      requestBody:
        $ref: '#/components/requestBodies/Driver'
      responses:
        "201":
          description: Driver added
        "405":
          description: Invalid input
  /v1/driver/{idDriver}:
    get:
      tags:
      - driver
      summary: Find driver by ID
      description: Returns a single driver
      operationId: getDriverById
      parameters:
      - name: idDriver
        in: path
        description: ID of driver to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleDriver'
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
    delete:
      tags:
      - driver
      summary: Deletes a driver
      operationId: deleteDriver
      parameters:
      - name: idDriver
        in: path
        description: Driver id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succesful delete
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
  /driver/{driverId}/image:
    post:
      tags:
      - driver
      summary: uploads an picture profile
      operationId: uploadDriverPicture
      parameters:
      - name: driverId
        in: path
        description: ID of driver to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Driver not found
        "405":
          description: Validation exception
  /driver/{idDriver}/vehicle:
    get:
      tags:
      - vehicle
      summary: Get all vehicles by driver in the system
      operationId: getVehiclesByDriver
      parameters:
      - name: idDriver
        in: path
        description: ID of driver
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid status value
  /driver/{idDriver}/payment/{idPayment}:
    get:
      tags:
      - driver
      summary: Get payment by ID driver and ID payment
      operationId: getPaymentByDriverId
      parameters:
      - name: idDriver
        in: path
        description: ID driver payment that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: idPayment
        in: path
        description: ID payment that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Payment'
        "400":
          description: Invalid id payment
        "401":
          description: Please sign in
        "404":
          description: Data not found
  /driver/{idDriver}/payment:
    get:
      tags:
      - payment
      summary: Get payments by driverId
      operationId: getPaymentsByDriverId
      parameters:
      - name: idDriver
        in: path
        description: ID driver that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        "400":
          description: Invalid id payment
        "401":
          description: Please sign in
        "404":
          description: Data not found
  /vehicle:
    get:
      tags:
      - vehicle
      summary: Get all vehicles in the system
      operationId: getAllVehicles
      parameters:
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid status value
    put:
      tags:
      - vehicle
      summary: Update an existing vehicle
      operationId: updateVehicle
      requestBody:
        $ref: '#/components/requestBodies/Vehicle'
      responses:
        "200":
          description: Successful update
        "400":
          description: Invalid ID supplied
        "404":
          description: Vehicle not found
        "405":
          description: Validation exception
    post:
      tags:
      - vehicle
      summary: Add a new vehicle to the system
      operationId: addVehicle
      requestBody:
        $ref: '#/components/requestBodies/Vehicle'
      responses:
        "201":
          description: Vehicle added
        "405":
          description: Invalid input
  /vehicle/{idVehicle}:
    get:
      tags:
      - vehicle
      summary: Find vehicle by ID
      description: Returns a single vehicle
      operationId: getVehicleById
      parameters:
      - name: idVehicle
        in: path
        description: ID of vehicle to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid ID supplied
        "404":
          description: Vehicle not found
    delete:
      tags:
      - vehicle
      summary: Deletes a vehicle
      operationId: deleteVehicle
      parameters:
      - name: idVehicle
        in: path
        description: Vehicle id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succesful delete
        "400":
          description: Invalid ID supplied
        "404":
          description: Vehicle not found
  /vehicle/{idVehicle}/image:
    post:
      tags:
      - vehicle
      summary: uploads an picture profile
      operationId: uploadFileVehicle
      parameters:
      - name: idVehicle
        in: path
        description: ID of vehicle to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
  /vehicle/type:
    get:
      tags:
      - vehicle
      summary: Finds Vehicles by Type
      operationId: findVehiclesByType
      parameters:
      - name: type
        in: query
        description: Type to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid tag value
  /vehicle/brand:
    get:
      tags:
      - vehicle
      summary: Finds Vehicles by Brand
      operationId: findVehiclesByBrand
      parameters:
      - name: type
        in: query
        description: Type to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid tag value
  /vehicle/company:
    get:
      tags:
      - vehicle
      summary: Finds Vehicles by Company
      operationId: findVehiclesByCompany
      parameters:
      - name: type
        in: query
        description: Type to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid tag value
  /vehicle/{idVehicle}/score:
    get:
      tags:
      - vehicle
      summary: Get score by vehicleId
      operationId: getScoresByVehicleId
      parameters:
      - name: idVehicle
        in: path
        description: ID score that match in the Data Base
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: itemsPerPage
        in: query
        description: Number of items per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
      responses:
        "200":
          description: successful operation
          headers:
            pagination:
              description: necesary elements to implement pagination
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
        "400":
          description: Invalid id score
        "401":
          description: Please sign in
        "404":
          description: Data not found
  /payment:
    put:
      tags:
      - payment
      summary: Make a new payment
      operationId: addPayment
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        "201":
          description: Payment added
        "400":
          description: Invalid ID card supplied
        "401":
          description: Please sign in
        "405":
          description: Validation exception
  /score:
    put:
      tags:
      - payment
      summary: Make a new score
      operationId: addScore
      requestBody:
        $ref: '#/components/requestBodies/Score'
      responses:
        "201":
          description: Score added
        "400":
          description: Invalid ID user supplied
        "401":
          description: Please sign in
        "405":
          description: Validation exception
  /score/{idScore}:
    get:
      tags:
      - score
      summary: Find score by ID
      description: Returns a single score
      operationId: getScoreById
      parameters:
      - name: idScore
        in: path
        description: ID of score to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
            application/xml:
              schema:
                $ref: '#/components/schemas/Score'
        "400":
          description: Invalid ID supplied
        "404":
          description: Score not found
    delete:
      tags:
      - score
      summary: Deletes a score
      operationId: deleteScore
      parameters:
      - name: idScore
        in: path
        description: Score id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succesful delete
        "400":
          description: Invalid ID supplied
        "404":
          description: Score not found
  /card:
    put:
      tags:
      - card
      summary: Update an existing card
      operationId: updatecard
      requestBody:
        $ref: '#/components/requestBodies/Card'
      responses:
        "200":
          description: Successful update
        "400":
          description: Invalid ID supplied
        "404":
          description: Card not found
        "405":
          description: Validation exception
    post:
      tags:
      - card
      summary: Add a new card to the system
      operationId: addCard
      requestBody:
        $ref: '#/components/requestBodies/Card'
      responses:
        "201":
          description: Card added
        "405":
          description: Invalid input
  /card/{idCard}:
    get:
      tags:
      - card
      summary: Find card by ID
      description: Returns a single card
      operationId: getCardById
      parameters:
      - name: idCard
        in: path
        description: ID of card to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
        "400":
          description: Invalid ID supplied
        "404":
          description: Card not found
    delete:
      tags:
      - card
      summary: Deletes a card
      operationId: deleteCard
      parameters:
      - name: idCard
        in: path
        description: Card id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succesful delete
        "400":
          description: Invalid ID supplied
        "404":
          description: Card not found
components:
  schemas:
    AdministrationRequest:
      type: object
      properties:
        administartionId:
          type: integer
          format: int64
          example: 1
        ci:
          type: string
          example: 112562682
        firstName:
          type: string
          example: Juan
        firstSurname:
          type: string
          example: Apaza
        secondSurname:
          type: string
          example: Maldonado
        phone:
          type: string
          example: +591 65934875
        email:
          type: string
          example: admi@gamil.com
        password:
          type: string
          example: admi12345
    BankAccountRequest:
      type: object
      properties:
        bankAccountId:
          type: integer
          format: int64
          example: 5
        driverId:
          type: integer
          format: int64
          example: 7
        administrationId:
          type: integer
          format: int64
          example: 4
        accountNumber:
          type: integer
          format: int64
          example: 3234687561
        bank:
          type: string
          example: Banco Union
        accountType:
          type: string
          example: Bolsa de ahorros
    BankTransactionRequest:
      type: object
      properties:
        bankTransaccionId:
          type: integer
          format: int64
          example: 7
        driverBankAccountId:
          type: integer
          format: int64
          example: 3
        administrationBankAccountId:
          type: integer
          format: int64
          example: 11
        amount:
          type: number
          example: 1255.5
        transactionDate:
          type: string
          example: 2020-11-10
    CardRequest:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
          example: 6
        userId:
          type: integer
          format: int64
          example: 3
        accountNumber:
          type: string
          example: 846526594
        pin:
          type: string
        bank:
          type: string
          example: Banco Union
        typeAccount:
          type: string
          example: Bolsa de ahorros
        cvvCode:
          type: string
    DriverContactRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Jose Marco
        firstSurname:
          type: string
          example: Pereira
        secondSurname:
          type: string
          example: Muñoz
        companyName:
          type: string
          example: Independiente
        ci:
          type: string
          example: 483192843
    DriverHistoryRequest:
      type: object
      properties:
        userFirstName:
          type: string
          example: María
        startStreet:
          type: string
          example: Los Olmos
        startZone:
          type: string
          example: Ciudad Satelite
        deliveryStreet:
          type: string
          example: Batallón Colorados
        deliveryZone:
          type: string
          example: Sopocachi
        dateDelivery:
          type: string
          example: 2020-12-12
        userPhone:
          type: string
          example: +591 68457312
        travelStatus:
          type: string
          example: Confirmado
    DriverRequest:
      type: object
      properties:
        driverId:
          type: integer
          format: int64
          example: 12
        ci:
          type: string
          example: 12348626
        firstName:
          type: string
          example: Marco
        firstSurname:
          type: string
          example: Lopez
        secondSurname:
          type: string
          example: Lopez
        birthDate:
          type: string
          example: 1992-08-24
        phone:
          type: string
          example: +591 65493465
        email:
          type: string
          example: driver@gmail.com
        password:
          type: string
          example: marco@gmail.com
        number:
          type: string
          example: 168B
        street:
          type: string
          example: Pisagua
        zone:
          type: string
          example: Norte
        city:
          type: string
          example: La Paz
        country:
          type: string
          example: Bolivia
    DriverVehicleRequest:
      type: object
      properties:
        driverVehicleId:
          type: integer
          format: int64
          example: 12
        vehicleLicensePLate:
          type: string
          example: 985HTI
        vehicleCapacity:
          type: number
          example: 158.5
        vehicleType:
          type: string
          example: Minibus
        vehiclePrice:
          type: number
          example: 550
        vehicleStatus:
          type: string
          example: Habilitado
        vehicleBrand:
          type: string
          example: Toyota
        vehicleModel:
          type: string
          example: Toyosa-2000
    PaymentHistoryRequest:
      type: object
      properties:
        datePayment:
          type: string
          example: 2020-11-23
        paymentStatus:
          type: string
          example: Cancelado
        amount:
          type: number
          example: 650.5
        driverFirstName:
          type: string
          example: Carlos
        driverFirstSurname:
          type: string
          example: Aguilar
    PaymentRequest:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
          example: 1
        travelId:
          type: integer
          format: int64
          example: 3
        administartionId:
          type: integer
          format: int64
          example: 2
        datePayment:
          type: string
          example: 2020-10-23
        paymentStatus:
          type: string
          example: Confirmado
        amount:
          type: number
          example: 550.5
    ScoreRequest:
      type: object
      properties:
        vehicleId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 2
        score:
          type: number
          example: 4.3
    SingleDriver:
      type: object
      properties:
        ci:
          type: string
          example: 12348626
        firstName:
          type: string
          example: Marco
        firstSurname:
          type: string
          example: Lopez
        secondSurname:
          type: string
          example: Lopez
        birthDate:
          type: string
          example: 1992-08-24
        phone:
          type: string
          example: +591 65493465
        email:
          type: string
          example: driver@gmail.com
        number:
          type: string
          example: 168B
        street:
          type: string
          example: Pisagua
        zone:
          type: string
          example: Norte
        city:
          type: string
          example: La Paz
        country:
          type: string
          example: Bolivia
    SingleScore:
      type: object
      properties:
        score:
          type: number
          example: 4.5
        vehicleType:
          type: string
          example: Minibus
        vehicleBrand:
          type: string
          example: Toyota
        vehicleModel:
          type: string
          example: toyosa-2000
        personFisrtName:
          type: string
          example: Marco
        personFirstSurname:
          type: string
          example: Gonzalez
        vehicleLicensePlate:
          type: string
          example: 846JPA
        vehicleCapacity:
          type: number
          example: 845.5
        vehicleCompany:
          type: string
          example: Independiente
        personPhone:
          type: string
          example: +591 69451975
        vehicleStatus:
          type: string
          example: Ocupado
    SingleUser:
      type: object
      properties:
        ci:
          type: string
          example: 12348626
        firstName:
          type: string
          example: Marco
        firstSurname:
          type: string
          example: Lopez
        secondSurname:
          type: string
          example: Lopez
        birthDate:
          type: string
          example: 1992-08-24
        phone:
          type: string
          example: +591 65493465
        email:
          type: string
          example: driver@gmail.com
        number:
          type: string
          example: 168B
        street:
          type: string
          example: Pisagua
        zone:
          type: string
          example: Norte
        city:
          type: string
          example: La Paz
        country:
          type: string
          example: Bolivia
    SingleVehicle:
      type: object
      properties:
        personFisrtName:
          type: string
          example: Marco
        personFirstSurname:
          type: string
          example: Gonzalez
        vehicleLicensePlate:
          type: string
          example: 846JPA
        vehicleCapacity:
          type: number
          example: 845.5
        vehicleType:
          type: string
          example: Minibus
        vehiclePrice:
          type: number
          example: 450.5
        vehicleStatus:
          type: string
          example: Ocupado
        vehicleBrand:
          type: string
          example: Nissan
        vehicleModel:
          type: string
          example: Nissan - 2021
    TravelRequest:
      type: object
      properties:
        travelUserId:
          type: integer
          format: int64
          example: 2
        travelDriverId:
          type: integer
          format: int64
          example: 3
        travelStatus:
          type: string
          example: Confirmado
        travelDateDelivery:
          type: string
          example: 2020-11-11
        startAddressNumber:
          type: string
          example: 168
        startAddressStreet:
          type: string
          example: Los Olmos
        startAddressZone:
          type: string
          example: Ciudad Satelite
        startAddressCity:
          type: string
          example: La Paz
        startAddressCountry:
          type: string
          example: Bolivia
        deliveryAddressNumber:
          type: string
          example: 102B
        deliveryAddressStreet:
          type: string
          example: Cuba
        deliveryAddressZone:
          type: string
          example: Miraflores
        deliveryAddressCity:
          type: string
          example: La Paz
        deliveryAddressCountry:
          type: string
          example: Bolivia
    UserHistoryRequest:
      type: object
      properties:
        driverFirstName:
          type: string
          example: María
        startStreet:
          type: string
          example: Los Olmos
        startZone:
          type: string
          example: Ciudad Satelite
        deliveryStreet:
          type: string
          example: Batallón Colorados
        deliveryZone:
          type: string
          example: Sopocachi
        dateDelivery:
          type: string
          example: 2020-12-12
        driverPhone:
          type: string
          example: +591 68457312
        travelStatus:
          type: string
          example: Confirmado
    UserRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 12
        ci:
          type: string
          example: 12348626
        firstName:
          type: string
          example: Marco
        firstSurname:
          type: string
          example: Lopez
        secondSurname:
          type: string
          example: Lopez
        birthDate:
          type: string
          example: 1992-08-24
        phone:
          type: string
          example: +591 65493465
        email:
          type: string
          example: driver@gmail.com
        password:
          type: string
          example: marco@gmail.com
        number:
          type: string
          example: 168B
        street:
          type: string
          example: Pisagua
        zone:
          type: string
          example: Norte
        city:
          type: string
          example: La Paz
        country:
          type: string
          example: Bolivia
    VehicleDriverRequest:
      type: object
      properties:
        vehicleId:
          type: integer
          format: int64
          example: 1
        personFirstName:
          type: string
          example: Juan
        personFirstSurname:
          type: string
          example: Colque
        vehicleLicensePlate:
          type: string
          example: 846JPA
        vehicleCapacity:
          type: number
          example: 845.5
        vehicleType:
          type: string
          example: Minibus
        vehiclePrice:
          type: number
          example: 450.5
        vehicleStatus:
          type: string
          example: Ocupado
        vehicleBrand:
          type: string
          example: Nissan
        vehicleModel:
          type: string
          example: Nissan - 2021
        driverCompany:
          type: string
          example: Independiente
    VehicleRequest:
      type: object
      properties:
        vehicleDriverId:
          type: integer
          format: int64
          example: 1
    Person:
      type: object
      properties:
        idPerson:
          type: integer
          format: int64
          example: 111
        first_name:
          type: string
          example: Pedro Alejandro
        first_surname:
          type: string
          example: Perez
        second_surname:
          type: string
          example: Rodriguez
        ci:
          type: string
          example: 156451lp
        phone:
          type: string
          example: +591 7456451
    Address:
      type: object
      properties:
        idAddress:
          type: integer
          format: int64
          example: 111
        street:
          type: string
          example: Pisagua
        zone:
          type: string
          example: Norte
        city:
          type: string
          example: Nuestra Señora de La Paz
        country:
          type: string
          example: Bolivia
    User:
      required:
      - address
      - birthdate
      - email
      - idPerson
      - idUser
      - password
      type: object
      properties:
        idUser:
          type: integer
          format: int64
          example: 112
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: 1234abc
        birthdate:
          type: string
          format: date
          example: 2016-08-29
        picture:
          type: string
          example: url
        idPerson:
          $ref: '#/components/schemas/Person'
        address:
          $ref: '#/components/schemas/Address'
    Driver:
      required:
      - birthdate
      - email
      - idBankAccount
      - idCompany
      - idDriver
      - idPerson
      - password
      type: object
      properties:
        idDriver:
          type: integer
          format: int64
          example: 110
        password:
          type: string
          example: 1234abc
        email:
          type: string
          example: example@gmail.com
        birthdate:
          type: string
          format: date
          example: 2016-08-29
        picture:
          type: string
          example: url
        idPerson:
          $ref: '#/components/schemas/Person'
        idCompany:
          $ref: '#/components/schemas/Company'
        address:
          $ref: '#/components/schemas/Address'
    Vehicle:
      required:
      - brand
      - capacity
      - idDriver
      - idVehicle
      - licensePlate
      - pictures
      - price
      - status
      - vehicleModel
      - vehicleStatus
      - vehicleType
      properties:
        idVehicle:
          type: integer
          format: int64
          example: 110
        licensePlate:
          type: string
        capacity:
          type: number
          example: 2.5
        vehicleType:
          type: string
          example: medium weight
        vehicleStatus:
          type: string
          example: occupied
        price:
          type: number
          example: 150.8
        status:
          type: string
          description: Vehicle status in real time
          enum:
          - available
          - taken
        pictures:
          type: array
          xml:
            name: picturesUrl
            wrapped: true
          items:
            type: string
        brand:
          type: string
          example: Toyota
        vehicleModel:
          type: string
          example: Evolution 2020
        idDriver:
          $ref: '#/components/schemas/Driver'
    Company:
      required:
      - address
      - email
      - idCompany
      - name
      - phone
      properties:
        idCompany:
          type: integer
          format: int64
          example: 110
        name:
          type: string
          example: TransVeloz
        email:
          type: string
          example: example@gmail.com
        phone:
          type: integer
          example: 6758576
        address:
          $ref: '#/components/schemas/Address'
    Card:
      required:
      - accountNumber
      - bank
      - cvvCode
      - idCard
      - idUser
      - pin
      - typeAccount
      properties:
        idCard:
          type: integer
          format: int64
          example: 110
        accountNumber:
          type: string
        pin:
          type: string
        bank:
          type: string
          example: Banco Union
        typeAccount:
          type: string
          example: Savings account
        cvvCode:
          type: integer
        idUser:
          $ref: '#/components/schemas/User'
    Payment:
      required:
      - ammount
      - datePayment
      - idPayment
      - idTravel
      - paymentStatus
      properties:
        idPayment:
          type: integer
          format: int64
          example: 110
        datePayment:
          type: string
          format: date-time
        ammount:
          type: number
          example: 257.9
        paymentStatus:
          type: string
          example: confirmado
        idDriver:
          $ref: '#/components/schemas/Driver'
    bankAccount:
      required:
      - accountNumber
      - accountType
      - bank
      - idBankAccount
      properties:
        idBankAccount:
          type: integer
          format: int64
          example: 110
        accountNumber:
          type: number
          example: 13542
        bank:
          type: string
          example: Banco Union
        accountType:
          type: string
          example: Savings account
        idDriver:
          $ref: '#/components/schemas/Driver'
    Score:
      required:
      - idScore
      - idVehicle
      - score
      properties:
        idScore:
          type: integer
          format: int64
          example: 110
        score:
          type: number
          example: 4.9
        idVehicle:
          $ref: '#/components/schemas/Vehicle'
    Travel:
      type: object
      properties:
        idTravel:
          type: integer
          format: int64
          example: 110
        travelStatus:
          type: string
          example: confirmado
        deliveryDate:
          type: string
        startAddress:
          $ref: '#/components/schemas/Address'
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        idUser:
          $ref: '#/components/schemas/User'
        idDriver:
          $ref: '#/components/schemas/Driver'
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page
        itemsPerPage:
          type: integer
          description: Number of items per page
        totalItems:
          type: integer
          description: total elements
        totalPages:
          type: integer
          description: total pages
  requestBodies:
    Administration:
      description: Administration object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdministrationRequest'
      required: true
    User:
      description: User object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequest'
      required: true
    Driver:
      description: Driver object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverRequest'
      required: true
    Payment:
      description: Payment object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
        application/xml:
          schema:
            $ref: '#/components/schemas/Payment'
      required: true
    Vehicle:
      description: Vehicle object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vehicle'
        application/xml:
          schema:
            $ref: '#/components/schemas/Vehicle'
      required: true
    Score:
      description: Score object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Score'
        application/xml:
          schema:
            $ref: '#/components/schemas/Score'
      required: true
    Card:
      description: Card object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Card'
        application/xml:
          schema:
            $ref: '#/components/schemas/Card'
      required: true
